////////////////////////////////////////////////////////////////////
// A simple continuous state-action MDP for the classical cart-pole system 
// by Rich Sutton as implemented in http://incompleteideas.net/sutton/book/code/pole.c.
//
// The goal here is to push a cart on a flat and frictionless surface 
// left or right by applying a continuous valued force, in order to balance a 
// pole balanced vertically in the center of the cart.
//
// Some modifications are made to this domain that deviate from the original:
// 1. friction of the cart and pole are added that dampen acceleration
// 2. Gaussian sensor noise is added to the angle of the cart
// 3. Gaussian impulse noise is added to the force applied to the cart
// and are derived from https://github.com/AadityaRavindran/gym-cartpolemod.
//
// For the RDDL translation:
//
// Author: Mike Gimelfarb (mgimelfarb@yahoo.ca)
// 
////////////////////////////////////////////////////////////////////
domain cart_pole_continuous {

    requirements = {
        reward-deterministic
    };

    pvariables {

    	// forces
		GRAVITY   : { non-fluent, real, default = 9.8 };        // force of gravity acting down
		FORCE-MAX : { non-fluent, real, default = 10.0 };		// max force applied to the side of the cart

		// cart and pole properties
		CART-MASS : { non-fluent, real, default = 1.0 };        // mass of the cart
		POLE-MASS : { non-fluent, real, default = 0.1 };		// mass of the pole
		POLE-LEN  : { non-fluent, real, default = 0.5 }; 		// half of the pole length
		CART-FRICTION : { non-fluent, real, default = 0.0};     // friction of the cart
		POLE-FRICTION : { non-fluent, real, default = 0.0};     // friction of the pole
		IMPULSE-VAR : { non-fluent, real, default = 0.0};       // variance of noise added to force
		ANGLE-VAR : { non-fluent, real, default = 0.0};         // variance of noise added to cart angle sensor
		
		// other constants
		TIME-STEP : { non-fluent, real, default = 0.02 }; 		// seconds between state updates
		POS-LIMIT : { non-fluent, real, default = 2.4 };		// limit of cart position
		ANG-LIMIT : { non-fluent, real, default = 0.2094395 };	// limit of pole angle
	
		// interm & derived fluents
		corrupted-force : { interm-fluent, real };          // force applied to the cart after noise
		temp : { interm-fluent, real };						// temporary variable
		acc : { interm-fluent, real };							// position acceleration
		ang-acc : { interm-fluent, real };						// angular acceleration

		// states
       	pos    	: { state-fluent, real, default = 0 };          // cart position
       	ang-pos	: { state-fluent, real, default = 0 };          // pole angle
       	vel   	: { state-fluent, real, default = 0 };          // cart velocity
       	ang-vel : { state-fluent, real, default = 0 };          // pole angular velocity

       	// actions
       	force : { action-fluent, real, default = 0 };      	// how much force to apply to the side of the cart
    };

    cpfs {
	
	    // compute force
		corrupted-force = max[min[force + Normal(0.0, IMPULSE-VAR), FORCE-MAX], -FORCE-MAX];
		
		// compute the pole angular acceleration
		temp = (corrupted-force + POLE-LEN * POLE-MASS * pow[ang-vel, 2] * sin[ang-pos] - 
		       (CART-FRICTION * sgn[vel])) / (CART-MASS + POLE-MASS);
		ang-acc = (GRAVITY * sin[ang-pos] - cos[ang-pos] * temp - 
					(POLE-FRICTION * ang-vel / (POLE-LEN * POLE-MASS))) / (
            POLE-LEN * ((4.0 / 3.0) - (POLE-MASS * pow[cos[ang-pos], 2] / (CART-MASS + POLE-MASS))));
		
		// compute the cart acceleration
		acc = temp - (POLE-LEN * POLE-MASS * ang-acc * cos[ang-pos] / (CART-MASS + POLE-MASS));

		// Euler integration formula
		pos' = pos + TIME-STEP * vel;
		ang-pos' = (ang-pos + TIME-STEP * ang-vel) + Normal(0.0, ANGLE-VAR);
		vel' = vel + TIME-STEP * acc;
		ang-vel' = ang-vel + TIME-STEP * ang-acc;
    };

    // R = 1 as long as the pole is upright and the cart is not out of bounds
    reward = if (pos < -POS-LIMIT | pos > POS-LIMIT | ang-pos < -ANG-LIMIT | ang-pos > ANG-LIMIT) 
				then 0 else 1;

    termination {
		pos < -POS-LIMIT | pos > POS-LIMIT;
		ang-pos < -ANG-LIMIT | ang-pos > ANG-LIMIT;
    };

    state-invariants {
	
		// state is within limits
		pos >= -POS-LIMIT;
		pos <= POS-LIMIT;
		ang-pos >= -ANG-LIMIT;
		ang-pos <= ANG-LIMIT;
		
		// system is physically plausible
		GRAVITY >= 0 ^ FORCE-MAX >= 0;
		CART-MASS >= 0 ^ POLE-MASS >= 0 ^ POLE-LEN >= 0;
		TIME-STEP >= 0 ^ POS-LIMIT >= 0 ^ ANG-LIMIT >= 0;
    };

    action-preconditions {
        force >= -FORCE-MAX;
		force <= FORCE-MAX;
    };

}